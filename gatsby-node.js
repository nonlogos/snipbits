const path = require('path');
const { createRemoteFileNode } = require('gatsby-source-filesystem');

exports.createPages = async ({ graphql, actions, reporter }) => {
	const { createPage } = actions;

	const result = await graphql(`
		query {
			allMdx {
				edges {
					node {
						id
						# Slug field added by gatsby-plugin-mdx
						slug
					}
				}
			}
		}
	`);

	if (result.errors) {
		reporter.panicOnBuild('ERROR: loading createPages query');
	}

	const posts = result.data.allMdx.edges;

	posts.forEach(({ node }, index) => {
		createPage({
			// The slug generated by gatsby-plugin-mdx doesn't contain a slash at the beginning
			// You can prepend it with any prefix you want
			path: `/${node.slug}`,
			// This component will wrap our MDX content
			component: path.resolve(`./src/templates/post-template.tsx`),
			// You can use the values in this context in
			// our page layout component
			context: {
				id: node.id,
			},
		});
	});
};

exports.onCreateNode = async ({ node, createNodeId, actions: { createNodeField, createNode }, cache, store }) => {
	if (node.internal.type === 'Mdx' && node.frontmatter && node.frontmatter.embeddedImagesRemote) {
		let embeddedImagesRemote = await Promise.all(
			node.frontmatter.embeddedImagesRemote.map((url) => {
				try {
					return createRemoteFileNode({
						url,
						parentNodeId: node.id,
						createNode,
						createNodeId,
						cache,
						store,
					});
				} catch (error) {
					console.error(error);
				}
			})
		);
		if (embeddedImagesRemote) {
			createNodeField({
				node,
				name: 'embeddedImagesRemote',
				value: embeddedImagesRemote.map((image) => {
					return image.id;
				}),
			});
		}
	}
};

// in order to correctly process mdx frontmatter images using childImageSharp, GraphQL needs to understand that the field is of type File. here uses createType to manually type a new field

exports.createSchemaCustomization = ({ actions, schema }) => {
	const { createTypes } = actions;
	createTypes(`
   type Mdx implements Node {
     frontmatter: Frontmatter
     embeddedImagesRemote: [File] @link(from: "fields.embeddedImagesRemote")  
   }
   type Frontmatter @dontInfer {
     title: String!
		 date: Date @dateformat(formatString: "MM-DD-YYYY")
		 path: String!
		 description: String
		 keywords: [String]
		 embeddedImagesLocal: [File] @fileByRelativePath
     embeddedImagesRemote: [String]
   }
 `);
};
